---
title: Release Notes for Cloud Service Broker for Azure
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This topic describes the changes in this minor release of <%= vars.product_full %>
(<%= vars.product_short %>).

##<a id="1-7-0"></a> v1.7.0

**Release Date:** DD MMM YYYY

### Breaking Changes

This release has the following breaking changes:

- **The <%= vars.product_full%> tile now requires Jammy Stemcell:**

  The tile now depends on Jammy Stemcells instead of Xenial. You must have a Jammy Stemcell
  available in Tanzu Operations Manager, and Tanzu Operations Manager must be at version v2.10.33 or
  later.

- **Run-in header:** Description.
- **Run-in header:** Description.

### Features

New features and changes in this release:

#### General

- **Terraform upgraded to v1.5.7:**

 The Terraform version used to apply changes is upgraded to v1.5.7. You must upgrade
all service instances. When you upgrade, ensure that you follow the [Upgrade procedure](upgrading.html.md.erb#procedure).

- **Apply changes now fails if there were problems upgrading one or more instances:**

  Issues when upgrading instances are now surfaced to Tanzu Operations Manager by failing the deploy-all errand. In this case, the deployment log needs to be
  inspected for detailed information on upgrade failures.
  For more information on the upgrade process, see [Upgrading Cloud Service Broker for Azure](upgrading.html).

- **Tile installation now does not install if it finds any outdated [non-orphaned instances](managing_orphaned_service_instances.html.md.erb):**

  This measure improves the overall stability and maintainability of the broker and any running instances.
  It protects operators from accidentally skipping mandatory intermediate versions, which could introduce unexpected issues.
  Despite this measure, VMware expects operators to [harness Upgrade Planner to view the supported upgrade path](https://upgrade-planner.pivotal.io).

### Resolved issues

This release has the following fixes:

- **Prevent performance degradation of database consistency checks at startup**

  Previously the <%= vars.product_short %> kept information in the database
  about instances and bindings that had already been destroyed. In the long
  term, this caused Cloud Service Broker's database space usage to grow with no
  real benefit. In some rare scenarios, this made Cloud Service Broker start up
  slower and caused the platform to timeout. The <%= vars.product_short %> now
  physically deletes information from destroyed assets, preventing this
  situation from happening.

- **The field 'unique' is not valid for _id index specification**

  Newer versions of Azure Cosmos DB for MongoDB automatically indexes the `_id` field and the `shard_key`.  
  See [Azure Cosmos DB Indexing for MongoDB server version 3.6 and higher](https://learn.microsoft.com/en-us/azure/cosmos-db/mongodb/indexing#indexing-for-mongodb-server-version-36-and-higher)

  Cloud Service Broker for Azure did this transparently for the user too.  
  So now, Azure Cosmos DB for MongoDB errors when trying to "duplicate" any of these indexes.  
  To maintain backward compatibility, Cloud Service Broker for Azure will keep indexing these fields by default

  However, we have exposed two new fields to allow bypassing this issue and also to improve the UX of this service:
  - A new property `indexes` can be added to your plans or passed at service creation time.  
    It expects a comma-separated list of non-unique indexes you want to have in your collection.
  - A new property `unique_indexes` can be added to your plans or passed at service creation time.  
    It expects a comma-separated list of unique indexes you want to have in your collection.

### Known issues

This release has the following issues:

- **Run-in header:** Description.
- **Run-in header:** Description.

## <a id="view"></a> View release notes for another version

To view the release notes for another product version, select the version from
the drop-down menu at the top of this page.
