---
title: Migration Manual Steps for v1.1.9
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This is a migration guide for v1.1.9

## <a href="overview"></a> Overview

In <%= vars.product_full %> v1.1.8 and earlier, an internal plan identifier that should
have been unique was accidentally reused, such that the `csb-azure-mssql-failover-group/small`
plan had the same internal identifier as the `csb-azure-mssql/small` plan.

<%= vars.app_runtime_abbr %> 2.11 checks for duplicate plan identifiers, resulting in
<%= vars.product_short %> v1.1.8 and earlier failing to install successfully on
<%= vars.app_runtime_abbr %> 2.11.
<%= vars.app_runtime_abbr %> 2.10 and earlier did not check for duplicate plan identifiers.

In <%= vars.product_short %> v1.1.9 engineers replaced the `csb-azure-mssql-failover-group/small`
plan with `csb-azure-mssql-failover-group/small-v2` which has a different internal identifier, but
is otherwise identical to `csb-azure-mssql-failover-group/small`.

## <a href="update"></a> Update Service Instances

You must update any service instances using `csb-azure-mssql-failover-group/small` to
`csb-azure-mssql-failover-group/small-v2`.

You do not need to perform these steps immediately after installation. You can performed them at any
time, and each service instance can be updated independently.

To update service instances after installing <%= vars.product_short %> v1.1.9:

1. Discover the GUID of the `csb-azure-mssql-failover-group` service offering by running:

    ```
    cf curl /v2/services?q=label:csb-azure-mssql-failover-group
    ```

    The printed JSON response has details of the `csb-azure-mssql-failover-group` service
    offering. <%# Ask an engineer for some output to insert here %>
    The `total_results` field should equal `1`.
    Make a note of the `guid` in the `metadata` object.
    If you have the `jq` tool installed, save the GUID as a shell variable by running:

    ```
    SERVICE_GUID="$(cf curl /v2/services?q=label:csb-azure-mssql-failover-group | jq -r .resources[0].metadata.guid)"
    ```

1. Discover the GUID of the `small` service plan by running:

    ```
    cf curl "/v2/service_plans?q=service_guid:SERVICE-GUID&q=unique_id:a556d1b4-5825-11ea-adb8-00155d4dfe6c"
    ```
    Where `SERVICE-GUID` is the service offering GUID from the previous step.

    <p class="note">
      <strong>Note:</strong> <code>a556d1b4-5825-11ea-adb8-00155d4dfe6c</code> is the internal
      identifier for the `small` plan.
    </p>

    The `total_results` field should equal `1`.
    Make a note of the `guid` in the `metadata` object.
    If you are using the `jq` tool, save the GUID as a shell variable by running:

    ```
    PLAN_GUID="$(cf curl "/v2/service_plans?q=service_guid:$SERVICE_GUID&q=unique_id:a556d1b4-5825-11ea-adb8-00155d4dfe6c" | jq -r .resources[0].metadata.guid)"
    ```

1. Discover the service instances that must be updated by running:

    ```
    cf curl "/v2/service_instances?q=service_plan_guid:PLAN-GUID"
    ```
    Where `PLAN-GUID` is the service plan GUID from the previous step.
    If the `total_results` field is `0` then no service instances need to be updated, and you can
    skip the remainder of the migration steps.
    If you have used the `jq` tool then you can obtain a list of GUIDs with the following command:

    ```cf curl "/v2/service_instances?q=service_plan_guid:$PLAN_GUID" | jq -r .resources[].metadata.guid
    ```

1. For each service instance identified in the previous step, discover the service instance name,
space name, and organization name.
You can find the space name from the `space_url` link, and you can find the organization name from
the `organization_url` in the response to the space query. <%# Where do you get this link? %>
Alternatively, if using the `jq` tool, the following query will return the service instance name,
space name, and organization name:

    ```
    cf curl "/v2/service_instances/$GUID?inline-relations-depth=2&include-relations=space,organization" | jq -r '{service: .entity.name, space: .entity.space.entity.name, organization: .entity.space.entity.organization.entity.name}'
    ```
    Where `$GUID` is the GUID of a service instance.

1. For each service instance, update the service instance by running:

    ```
    cf target -o ORGANIZATION-NAME -s SPACE-NAME
    cf update-service SERVICE-INSTANCE-NAME -p small-v2
    ```
    Where `ORGANIZATION-NAME`, `SPACE-NAME`, and `SERVICE-INSTANCE-NAME` are the values learned
    earlier.

    Where parameters were specified previously, specify them again to ensure that they are not reset
    to default values.

    For example, if the `instance_name` was previously set to `myinstance` then the update command
    should be:

    ```
    cf update-service SERVICE-INSTANCE-NAME -p small-v2 -c '{"instance_name": "myinstance"}'
    ```

1. Remove the obsolete `small` plan by running:

    ```
    cf curl -X DELETE /v2/service_plans/PLAN-GUID
    ```
    Where `PLAN-GUID` is the value obtained in a previous step.

    If you set the GUID as a shell variable, then run:

    ```
    cf curl -X DELETE /v2/$PLAN-GUID
    ```

1. Check that the plan has been removed by running:

    ```
    cf marketplace -s csb-azure-mssql-failover-group
    ```
    Confirm that the `small` plan is no longer listed.
    Only the `small-v2`, `medium`, and `large` plans should be listed.
