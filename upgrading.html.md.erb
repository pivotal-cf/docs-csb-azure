---
title: Upgrading Cloud Service Broker for Azure
owner: Cloud Service Broker
---

Would you like to upgrade <%= vars.product_full %>? This topic tells you about the [Upgrade procedure](#procedure), [Upgrading service instances](#upgrade-instances),
and specific details about [Upgrading to v1.4](#upgrading-specifics).

## Pre-upgrade procedure

<p class="note important">
<span class="note__title">Important</span>Before upgrading, it is crucial to perform the checks suggested in this section.</span>
  Failure to do so can cause the upgrade to fail and leave the broker unable to manage your instances.
</p>

* **Check if services are up-to-date**
   Execute the command:

   ```shell
   cf upgrade-all-services BROKER-NAME -check-up-to-date
   ```

   This command checks whether all services provided by the specified broker are up-to-date.
   An instance is considered not up-to-date if it is pending upgrade, or if it is an orphaned service instance.

* **Check for orphaned service instances**
   For greater granularity, you can specifically check only orphan service instances by running this command:

   ```shell
   cf upgrade-all-services BROKER-NAME -check-deactivated-plans
   ```

   This checks for any service instances still using plans that have been deactivated.
   For more information, see [Managing orphaned service instances documentation](./managing_orphaned_service_instances.html.md.erb).


## <a id="procedure"></a> Upgrade procedure

>**Important**
>When upgrading <%= vars.product_short %>, service instances might need
   to be upgraded.
   Failure to upgrade one or more instance does not cause the tile installation to fail.

>Review the `deploy-all` errand logs in the change log to verify that
   no errors occurred when upgrading instances.

To upgrade <%= vars.product_short %>:

1. Before you stage the new tile version,
   [verify that all service instances are up to date](#upgrade-instances).

2. Download the new version of <%= vars.product_short %> from
   [<%= vars.product_network %>](https://docs.vmware.com/en/Cloud-Service-Broker-for-VMware-Tanzu/index.html).

3. Stage and configure the tile by following the instructions in
   [Installing with Azure](installing-with-azure.html.md.erb).

4. Make all the changes described in [Upgrading to v1.4](#upgrading-specifics).

5. Verify that your configuration complies with the
   [Important notes about upgrading service instances](#upgrade-notes) section
   later in this topic, especially regarding upgrading all instances of config,
   plans,
   and beta offerings.

6. Go to the <%= vars.ops_manager %> Installation Dashboard.

7. Click **Review Pending Changes** and then click **Apply Changes**.

8. Review the `deploy-all` errand logs for any errors created because of the upgrade instances task.

### <a id="upgrade-instances"></a> Verify that service instances are up to date before upgrading the tile

Service instances that haven't been upgraded with one version of the tile might not be upgradable by
a later version.
For this reason, verify that there are no service instances pending upgrade before staging the new version of the tile.

You can see whether there are instances with a pending upgrade by reviewing the last `deploy-all` errand
log for <%= vars.product_short %>. Alternatively, you can
[verify that all instances are up to date with the CLI plug-in](#checking-cli-plugin)
and the `-dry-run` flag, which outputs the list of instances pending upgrade.

You can see whether there are instances with a pending upgrade by using the CLI plug-in.
For more information, see [ensuring all instances are up to date with the CLI plug-in](#checking-cli-plugin).

If you find any instances that are pending upgrades, follow the upgrading instructions for your
current version.

### <a id="upgrade-notes"></a> Important notes about upgrading service instances

Before you start upgrading service instances, see the following notes:

- **Select the Upgrade all services check box:**

  If the **Upgrade all services** check box is not selected, service instances are not upgraded
  during installation. These instances become unmanageable by the broker.
  Any operations on that instance, such as update, bind, unbind, or delete, are blocked
  until you run the upgrade task.
  You can run the upgrade task at any time before upgrading the product to a later version.
  See [Upgrade All Service Instances configuration](installing-with-azure.html.md.erb#upgrade-all-config) for information
  on how to configure this task.
  Alternatively, you can run the upgrade at a later stage by using the [CLI plug-in](#upgrading-cli-plugin).

- **Select the Enable Beta offerings check box:**

  If the **Enable Beta offerings** check box is not selected when applying changes, instances from
  those service offerings are not upgraded. These instances become unmanageable by the broker.
  Verify that the **Enable Beta offerings** check box is selected if you have instances from those
  offerings that you intend to keep updated.

- **Deleting custom plans:**

  If you delete custom plans before upgrading all instances, instances from these plans are not
  upgraded. These instances become unmanageable by the broker. Delete plans after upgrading all
  instances, or see [Release Notes for Cloud Service Broker for Azure](release-notes.html.md.erb) and
  [Upgrading to v1.4](#upgrading-specifics) to prevent conflicting upgrades.

- **Only upgrade the tile after all service instances are up to date:**

  You can run the upgrade all instances task as many times as needed.
  If you prefer, run the upgrade all instances task by using the cf CLI instead of,
  or in addition to, running it through the tile.
  Failure to upgrade one or more instances does not cause the tile installation to fail.
  Review the `deploy all` errand logs to verify that all instances have upgraded.

### <a id="checking-cli-plugin"></a> Verify that all instances are up to date with the CLI plug-in

To verify that no instances are pending upgrade:

1. Install the [cf CLI UpgradeAllServices plug-in on Cloud Foundry](https://plugins.cloudfoundry.org/#UpgradeAllServices).
1. Follow the instructions in the **Usage** section of the `README` in the
   [upgrade-all-services-cli-plugin](https://github.com/cloudfoundry/upgrade-all-services-cli-plugin#usage)
   GitHub repository to perform a `check-up-to-date` command.

   `check-up-to-date` example:

   ```shell
   cf upgrade-all-services BROKER-NAME -check-up-to-date
   ```

   These command provide a list, from enabled plans, of instances that are pending upgrades, and a list of
   orphaned service instances that belong to deactivated plans.
   Manage all the instances listed before attempting a tile upgrade.

### <a id="upgrading-cli-plugin"></a> Upgrade instances through the CLI plug-in

To run the cf CLI plug-in:

1. Install the [cf CLI UpgradeAllServices plug-in on Cloud Foundry](https://plugins.cloudfoundry.org/#UpgradeAllServices).
1. To run the upgrade, follow the instructions in the **Usage** section of the `README` in the
   [upgrade-all-services-cli-plugin](https://github.com/cloudfoundry/upgrade-all-services-cli-plugin#usage)
   GitHub repository.

   For example:

   ```shell
   cf upgrade-all-services BROKER-NAME
   ```

Run the CLI plug-in with the `-dry-run` flag before applying the service instance upgrade to find
out which instances are pending upgrade.

## <a id="upgrading-specifics"></a> Upgrade to v1.4

### <a id="redis"></a> Upgrading to Azure Cache for Redis v6

New Redis v6 is now available through  <%= vars.product_short %>.

>**Note**
>All brokerpak-provided plans set the Redis version to v4 to maintain compatibility with the instances already created.
  These plans are deprecated and removed from the brokerpak in future releases in favor of custom-defined plans in the tile.
  VMware recommends that you update all instances to use custom-defined plans instead.

To update to Redis v6:

1. Before updating the Redis version, read the
[Microsoft Azure upgrade recommendations](https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-how-to-upgrade)
and understand any possible consequences to the service.

1. Identify the instance that you want to update to use Redis v6.

2. Identify the plan used to create the instance by running:

   ```console
   cf service INSTANCE-NAME
   ```

   Where `INSTANCE-NAME` is the name of the service to be updated.

3. Find the plan definition of the plan you identified.
   If it is a custom plan, you can find its definition in the tile configuration.
   If it is a brokerpak-provided plan, you can find the corresponding properties
   [in the brokerpak definition](https://github.com/cloudfoundry/csb-brokerpak-azure/blob/6f4a2879ea330fdedbbed896259f9f1942f2ff4b/azure-redis.yml#L26-L102)</a>.

4. If the plan is a custom plan, you can update the instance to use Redis v6 by running:

   ```console
   cf update-service INSTANCE-NAME -c '{"redis_version": "6"}'
   ```

   Where `INSTANCE-NAME` is the name of the service to be updated.

5. If the plan is a brokerpak-provided one, you can either define a plan with or without a specified
Redis version. Choose one of the following options:

    * **Option 1:** Define the custom-created plan with a specified Redis version.

        1. Define a custom plan that specifies the Redis version. For example:

            ```json
            {
              "name": "custom-plan-v6",
              "id": "ba3d28f0-6b17-11ed-91ca-1f5af50ef86f",
              "description": "Custom plan",
              "sku_name": "Basic",
              "family": "C",
              "capacity": 1,
              "tls_min_version": "1.2",
              "firewall_rules": [],
              "redis_version": "6"
            }
            ```

            >**Important**
            >All other service properties must match
              the plan the instance is already on.
              If you set the `redis_version` property in the plan, users cannot change
              that property during create or update instance operations.

        2. Update the instance to the new plan by running:

           ```console
           cf update-service INSTANCE-NAME -p NEW-PLAN-NAME
           ```

           Where `NEW-PLAN-NAME` is the name of the plan created in previous step.

    * **Option 2:** Define a custom-created plan without a specified Redis version.

        1. Define a custom plan that does not specify the Redis version. For example:

            ```json
            {
               "name": "custom-plan-v6",
               "id": "ba3d28f0-6b17-11ed-91ca-1f5af50ef86f",
               "description": "Custom plan",
               "sku_name": "Basic",
               "family": "C",
               "capacity": 1,
               "tls_min_version": "1.2",
               "firewall_rules": []
            }
            ```

            >**Important**
            >All service properties, other than `name`, `id`, and `description`, must match the plan the instance is already on.

        2. Update the instance to the new plan by running:

            ```console
            cf update-service INSTANCE-NAME -p NEW-PLAN-NAME -c '{"redis_version": "6"}'
            ```

            Where `NEW-PLAN-NAME` is the name of the plan created in previous
            step.
